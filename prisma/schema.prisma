generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  mobile        String
  dob           String
  lastLogin     DateTime     @default(now())
  currentStreak Int          @default(0)
  experience    Int          @default(0)
  level         Int          @default(1)
  notes         Note[]
  topics        Topic[]
  userAnswers   UserAnswer[]
  points        Int               @default(0)
  achievements  UserAchievement[]
  interviewQuizzes InterviewQuiz[]
  interviewResults InterviewResult[]
}

model Topic {
  id        String     @id @default(uuid())
  userId    String
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  note      Note?
  resources Resource[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id            String         @id @default(uuid())
  topicId       String
  title         String
  type          ResourceType
  url           String
  summary       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  flashcardDeck FlashcardDeck?
  quizzes       Quiz[]
  topic         Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Quiz {
  id          String       @id @default(uuid())
  resourceId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resource    Resource     @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  quizQAs     QuizQA[]
  quizResults QuizResult[]
  userAnswers UserAnswer[]
}

model QuizQA {
  id            String       @id @default(uuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer String
  explanation   String?
  difficulty    String       @default("Medium")
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userAnswers   UserAnswer[]
}

model QuizResult {
  id             String   @id @default(uuid())
  quizId         String
  score          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  totalQuestions Int      @default(0)
  userId         String?
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model UserAnswer {
  id             String   @id @default(uuid())
  userId         String
  quizId         String
  quizQAId       String
  selectedOption String
  isCorrect      Boolean
  createdAt      DateTime @default(now())
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizQA         QuizQA   @relation(fields: [quizQAId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FlashcardDeck {
  id         String      @id @default(uuid())
  resourceId String      @unique
  title      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cards      Flashcard[]
  resource   Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
}

model Flashcard {
  id         String            @id @default(uuid())
  deckId     String
  term       String
  definition String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deck       FlashcardDeck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  reviews    FlashcardReview[]
}

model FlashcardReview {
  id         String    @id @default(uuid())
  cardId     String
  difficulty Int
  nextReview DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  card       Flashcard @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model ContactQuery {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(uuid())
  content   String?
  topicId   String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ResourceType {
  ARTICLE
  VIDEO
  PDF
}

model Achievement {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String   // e.g., an emoji like "üèÜ" or a URL to an icon
  criteria    String   @unique // A unique key like 'created_5_topics'
  points      Int      @default(50)
  users       UserAchievement[]
}

model UserAchievement {
  id            String     @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime   @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

/// Interview Preparation: standalone quiz not tied to a Resource
model InterviewQuiz {
  id           String              @id @default(uuid())
  userId       String
  language     String              // e.g., "Python", "Java"
  domain       String              // legacy single domain
  domains      String[]            @default([]) // multiple domains (new)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  questions    InterviewQuestion[]
  results      InterviewResult[]
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterviewQuestion {
  id            String         @id @default(uuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer String
  explanation   String?
  difficulty    String         @default("Medium")
  createdAt     DateTime       @default(now())
  quiz          InterviewQuiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model InterviewResult {
  id             String        @id @default(uuid())
  quizId         String
  userId         String
  score          Int
  totalQuestions Int           @default(0)
  answers        Json?         // [{questionId, selectedOption}]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  quiz           InterviewQuiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}
